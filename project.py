# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/ErenKaradeniz0/ff09b5ce47a962fdb564d03ceb8cd863/project.ipynb
"""

import numpy as np
import pandas as pd
import seaborn as sns

sns.set(rc={'figure.figsize':(15,7)})

df = pd.read_csv("AB_NYC_2019.csv", delimiter=",", encoding="UTF-8")
df.head()

df.info()

df.columns

df.size

df.shape

df.describe().T

df.drop(["id","name", "host_id", "host_name"], inplace=True, axis = 1 )
#delete delete unnecessary columns

df.head()

integers = ["minimum_nights","number_of_reviews", "calculated_host_listings_count", "availability_365"]

for column in integers:
  df[column] = pd.to_numeric(df[column], errors="coerce")

  max_value = (3*df[column].std()) + df[column].mean()
  min_value = -((3*df[column].std()) + df[column].mean())

  mean = df.loc[(df[column] > min_value) & (df[column] < max_value), column].mean()

  if mean is not np.nan:
    df.loc[(df[column] < min_value) | (df[column] > max_value), column] = mean  # change outlier values with mean
    df[column].fillna(mean, inplace=True)  # fill nan values with mean
  else:  # this condition means there is no outlier value in the column
    df[column].fillna(df[column].mean(), inplace=True)  # just fill nan values with mean

  df[column] = df[column].astype("int64")  # the type will be converted to int64

df.info()

sns.histplot(df["price"], kde=True)

floats = ["price", "reviews_per_month", "calculated_host_listings_count", "latitude", "longitude"]

for column in floats:
  df[column] = pd.to_numeric(df[column], errors="coerce")

  max_value = (3*df[column].std()) + df[column].mean()
  min_value = -((3*df[column].std()) + df[column].mean())

  mean = df.loc[(df[column] > min_value) & (df[column] < max_value), column].mean()

  if mean is not np.nan:
    df.loc[(df[column] < min_value) | (df[column] > max_value), column] = mean  # change outlier values with mean
    df[column].fillna(mean, inplace=True)  # fill nan values with mean
  else:  # this condition means there is no outlier value in the column
    df[column].fillna(df[column].mean(), inplace=True)  # filling NA values with mean

  df[column] = df[column].astype("float64") #converting the type to int64

df.info()

sns.histplot(df["price"], kde=True)

df.groupby("room_type")["room_type"].value_counts()

for key, value in df.groupby(by="room_type")["room_type"].value_counts().items():
  if value==1:
    df.loc[df["room_type"]==key[0], "room_type"] = "unknown_type"

df.groupby(by="room_type")["room_type"].value_counts()

df.describe().T

df.pivot_table(values=["number_of_reviews", "availability_365", "price"],
               columns="room_type",
               aggfunc=np.mean)

df["room_type"].unique()

df["room_type"].value_counts()

df["room_type"].head()

df["room_type"].value_counts().plot.barh().set_title("Room Type Frequencies of Rooms")

df["room_type"].value_counts().plot.bar().set_title("Room Type Frequencies of Rooms")

df["room_type"].index

sns.barplot(x="room_type", y=df["room_type"].index, data=df, color="purple").set_title("Room type Density")

sns.barplot(x="room_type", y="price", data=df)
plt.title("Room_type - Price")

sns.scatterplot(x="room_type", y="price", hue = "reviews_per_month",data = df )
plt.title("Room_type - Price - reviews_per_month")